<?php

// API 

include_once 'tm_api.drush.inc';

function tm_api_menu() {

   $items = array();

   $items['api'] = array(
      'page callback' => 'tm_api_home',
      'access arguments' => array('access content')
   );

   $items['api/public/test'] = array(
      'page callback' => 'tm_api_test',
      'access arguments' => array('access content')
   );

   $items['api/public/stats'] = array(
      'page callback' => 'tm_api_stats',
      'access arguments' => array('access content')
   );

   $items['api/public/chapters_lat_lon'] = array(
      'page callback' => 'tm_api_chapters_lat_lon',
      'access arguments' => array('access content')
   );

   $items['api/public/events'] = array(
      'page callback' => 'tm_api_events',
      'access arguments' => array('access content')
   );

   $items['api/public/members_in_country'] = array(
      'page callback' => 'tm_api_members_in_country_count',
      'access arguments' => array('access content')
   );

   $items['api/public/organizations_in_country'] = array(
      'page callback' => 'tm_api_organizations_in_country_count',
      'access arguments' => array('access content')
   );

   $items['api/public/chapter_leaders'] = array(
      'page callback' => 'tm_api_chapter_leaders',
      'access arguments' => array('access content')
   );

   $items['api/public/chapter_json'] = array(
      'page callback' => 'tm_api_chapter_json',
      'access arguments' => array('access content')
   );

   return $items;
}

function tm_api_home() {

   // initialize api data
  global $conf;
  print("<p><h1>" . $conf["tm_site_name"] . " API</h1>
    Welcome! Here's a list of what you can do so far:
    <br>
    <br>api/public/test - API test page
    <br>api/public/stats - basic stats
    <br>api/public/chapters_lat_lon - chapters lat and lon
    <br>api/public/events - upcoming events (optional: ?limit=10 to set limit)
    <br>api/public/members_in_country - member count in country (example: ?country=US,UK)
    <br>api/public/chapter_leaders - list of chapter leaders
    <br>api/public/chapter_json - public chapter JSON data (example: ?shortcode=SYD)
    <br>
    <br>All results as returned as JSON. For JSONP append ?callback=myfunction to the URL.
    </p>");
   drupal_exit();
}

function tm_api_test() {
   
   // initialize api data
   $api_data = _get_empty_api_data();

   global $conf;
   $api_data["message"] = $conf["tm_site_name"] . ' RESTful API Test. If you see this, the API module is loaded.';
   
   tm_api_return_json($api_data);
}

// return api stats data in json format
function tm_api_stats() {

  $api_data = tm_api_stats_get_data();
  tm_api_return_json($api_data);

}

// fetch api stata data
// cache for 30 mins
function tm_api_stats_get_data($use_cache = true) {

  if ($use_cache) {
    // check cache
    $cache = cache_get('tm-api-stats', 'cache');
    if (!empty($cache)) {
      return $cache->data;
    }
  }

  // initialize api data
  $api_data = array("message" => null, "error" => null, "success" => true);

  // flags
  $register_flag = flag_get_flag('event_register', NULL);
  $waitlist_flag = flag_get_flag('event_waitlist', NULL);
  $follow_flag = flag_get_flag('follow_members', NULL);
  $follow_organizations_flag = flag_get_flag('follow_organizations', NULL);

  // number of chapters
  $query = "SELECT COUNT(*) amount FROM {node} n ".
              "WHERE n.type = :type";
  $num_chapters = db_query($query, array(':type' => "chapter"))->fetch();
  $api_data["num_chapters"] = $num_chapters->amount;

  // number of organizations
  $query = "SELECT COUNT(*) amount FROM {node} n ".
              "WHERE n.type = :type";
  $num_organizations = db_query($query, array(':type' => "organization"))->fetch();
  $api_data["num_organizations"] = $num_organizations->amount;

  // number of events in past
  // chapter events
  $query_sql = "SELECT COUNT(*) total FROM {field_data_field_event_date} e 
  LEFT JOIN field_data_field_chapter p on e.entity_id = p.entity_id
  WHERE p.bundle = 'event'
  AND e.entity_type = 'node' AND field_event_date_value <= NOW()";
  $num_events = db_query($query_sql)->fetch();
  $api_data["num_events"] = $num_events->total;

  // number of events (past year)
  // chapter events
  $query_sql = "SELECT COUNT(*) total FROM {field_data_field_event_date} e 
  LEFT JOIN field_data_field_chapter p on e.entity_id = p.entity_id
  WHERE p.bundle = 'event'
  AND e.entity_type = 'node' AND field_event_date_value >= (NOW() - INTERVAL 1 YEAR) AND field_event_date_value <= NOW()";
  $num_events_past_year = db_query($query_sql)->fetch();
  $api_data["num_events_past_year"] = $num_events_past_year->total;

  // number of members
  $query = "SELECT COUNT(*) amount FROM {users} u";
  $num_members = db_query($query)->fetch();
  $api_data["num_members"] = $num_members->amount;
 
  // number of chapter countries
  $result = db_query("SELECT DISTINCT iso2, name from {field_data_field_country} f LEFT JOIN {countries_country} c ON f.field_country_iso2 = c.iso2 WHERE f.bundle = 'chapter' AND c.iso2 IS NOT NULL ORDER BY name ASC");
  $chapter_countries = $result->fetchAllKeyed();
  $num_chapter_countries = (sizeof($chapter_countries));
  $api_data["num_chapter_countries"] = $num_chapter_countries;

  // number of member countries
  $result = db_query("SELECT DISTINCT field_user_country_iso2 from {field_data_field_user_country} ORDER BY field_user_country_iso2 ASC");
  $member_countries = $result->fetchAllKeyed(0,0);
  $num_member_countries = (sizeof($member_countries));
  $api_data["num_member_countries"] = $num_member_countries;

  // number of follows
  $query = "SELECT COUNT(*) amount FROM {flagging} f WHERE f.fid = :fid";
  $num_member_followers = db_query($query, array(':fid' => $follow_flag->fid))->fetch();
  $api_data["num_member_followers"] = $num_member_followers->amount;

  // number of company follows
  $query = "SELECT COUNT(*) amount FROM {flagging} f WHERE f.fid = :fid";
  $num_organization_followers = db_query($query, array(':fid' => $follow_organizations_flag->fid))->fetch();
  $api_data["num_organization_followers"] = $num_organization_followers->amount;

  // number of connections (member + organization follows)
  $api_data["num_connections"] = $api_data["num_member_followers"] + $api_data["num_organization_followers"];

  // num of mutual follows
  $query = "select count(distinct flagging.uid, f2.uid) as amount from flagging inner join flagging as f2 on flagging.uid = f2.entity_id where flagging.fid = :fid and f2.fid = :fid order by flagging.uid";
  $num_mutual_followers = db_query($query, array(':fid' => $follow_flag->fid))->fetch();
  $api_data["num_mutual_follows"] = $num_mutual_followers->amount;

  // number of registrations
  $query = "SELECT COUNT(*) amount FROM {flagging} f WHERE f.fid = :fid";
  $num_registrations = db_query($query, array(':fid' => $register_flag->fid))->fetch();
  $api_data["num_event_registrations"] = $num_registrations->amount;

  // number of unique registrations
  $query = "SELECT COUNT(DISTINCT(f.uid)) amount FROM {flagging} f WHERE f.fid = :fid";
  $num_registrations = db_query($query, array(':fid' => $register_flag->fid))->fetch();
  $api_data["num_event_unique_registrations"] = $num_registrations->amount;

  // number of registrations (past year)
  $query = "SELECT COUNT(*) amount FROM {flagging} f WHERE f.fid = :fid AND timestamp > UNIX_TIMESTAMP(NOW() - INTERVAL 1 YEAR)";
  $num_registrations_past_year = db_query($query, array(':fid' => $register_flag->fid))->fetch();
  $api_data["num_event_registrations_past_year"] = $num_registrations_past_year->amount;

  // number of waitlists
  $query = "SELECT COUNT(*) amount FROM {flagging} f WHERE f.fid = :fid";
  $num_waitlists = db_query($query, array(':fid' => $waitlist_flag->fid))->fetch();
  $api_data["num_event_waitlists"] = $num_waitlists->amount;

  // number of waitlists (past year)
  $query = "SELECT COUNT(*) amount FROM {flagging} f WHERE f.fid = :fid AND timestamp > UNIX_TIMESTAMP(NOW() - INTERVAL 1 YEAR)";
  $num_waitlists_past_year = db_query($query, array(':fid' => $waitlist_flag->fid))->fetch();
  $api_data["num_waitlists_past_year"] = $num_waitlists_past_year->amount;

  // number of chapter leaders
  $query = "SELECT COUNT(DISTINCT(field_chapter_leaders_target_id)) AS amount FROM field_data_field_chapter_leaders fd WHERE fd.bundle = 'chapter' AND fd.deleted = 0";
  $num_chapter_leaders = db_query($query)->fetch();
  $api_data["num_chapter_leaders"] = $num_chapter_leaders->amount;

  // number of member profile views in past 7, 30, 90 days
  if (module_exists("tm_track_views")) {
    
    // profile views 7 days
    $query = "SELECT COUNT(entity_id) AS amount FROM tm_track_views WHERE entity_type = 1 AND timestamp > UNIX_TIMESTAMP(NOW() - INTERVAL 7 DAY)";
    $num_profile_views_7_days = db_query($query)->fetch();
    $api_data["num_profile_views_7_days"] = $num_profile_views_7_days->amount;

    // profile views 30 days
    $query = "SELECT COUNT(entity_id) AS amount FROM tm_track_views WHERE entity_type = 1 AND timestamp > UNIX_TIMESTAMP(NOW() - INTERVAL 30 DAY)";
    $num_profile_views_30_days = db_query($query)->fetch();
    $api_data["num_profile_views_30_days"] = $num_profile_views_30_days->amount;

    // profile views 90 days
    $query = "SELECT COUNT(entity_id) AS amount FROM tm_track_views WHERE entity_type = 1 AND timestamp > UNIX_TIMESTAMP(NOW() - INTERVAL 90 DAY)";
    $num_profile_views_90_days = db_query($query)->fetch();
    $api_data["num_profile_views_90_days"] = $num_profile_views_90_days->amount;
  }

  // number of new members in past 30 days
  $query = "SELECT COUNT(*) as amount FROM users WHERE created > UNIX_TIMESTAMP(NOW() - INTERVAL 31 DAY)";
  $num_new_members_30_days = db_query($query)->fetch();
  $api_data["num_new_members_30_days"] = $num_new_members_30_days->amount;

  // number of new members in past 90 days
  $query = "SELECT COUNT(*) as amount FROM users WHERE created > UNIX_TIMESTAMP(NOW() - INTERVAL 90 DAY)";
  $num_new_members_90_days = db_query($query)->fetch();
  $api_data["num_new_members_90_days"] = $num_new_members_90_days->amount;

  // number of new members in past year
  $query = "SELECT COUNT(*) as amount FROM users WHERE created > UNIX_TIMESTAMP(NOW() - INTERVAL 1 YEAR)";
  $num_new_members_1_year = db_query($query)->fetch();
  $api_data["num_new_members_1_year"] = $num_new_members_1_year->amount;

  // number of member subscriptions
  if (module_exists("tm_subscriptions_user")) {
    $num_subscribed_members_amount = flag_get_flag_counts("user_subscription_enable");
    $api_data["num_subscribers"] = $num_subscribed_members_amount;
  }

  // number of past livestream events
  $query_sql = "SELECT COUNT(*) AS total FROM {field_data_field_event_date} e 
  LEFT JOIN field_data_field_event_livestream_video_url p on e.entity_id = p.entity_id
  WHERE p.entity_type = 'node' AND field_event_livestream_video_url_value IS NOT NULL 
  AND e.entity_type = 'node' AND field_event_date_value <= NOW()";
  $num_livestream_events = db_query($query_sql)->fetch();
  $api_data["num_livestream_events"] = $num_livestream_events->total;

  // number of livestream registrations
  $query_sql = "SELECT COUNT(*) AS total FROM {flagging} f
  LEFT JOIN field_data_field_event_livestream_video_url p ON f.entity_id = p.entity_id
  WHERE f.fid = :fid AND p.entity_type = 'node' AND field_event_livestream_video_url_value IS NOT NULL";
  $num_livestream_event_registrations = db_query($query_sql, array(':fid' => $register_flag->fid))->fetch();
  $api_data["num_livestream_event_registrations"] = $num_livestream_event_registrations->total;

  // number of past online events
  $query_sql = "SELECT COUNT(*) AS total FROM {field_data_field_event_date} e 
  LEFT JOIN field_data_field_event_is_online p ON e.entity_id = p.entity_id
  WHERE p.entity_type = 'node' AND field_event_is_online_value = 1
  AND e.entity_type = 'node' AND field_event_date_value <= NOW()";
  $num_online_events = db_query($query_sql)->fetch();
  $api_data["num_online_events"] = $num_online_events->total;

  // number of online event registrations
  $query_sql = "SELECT COUNT(*) AS total FROM {flagging} f
  LEFT JOIN field_data_field_event_is_online p ON f.entity_id = p.entity_id
  WHERE f.fid = :fid AND p.entity_type = 'node' AND field_event_is_online_value = 1";
  $num_online_event_registrations = db_query($query_sql, array(':fid' => $register_flag->fid))->fetch();
  $api_data["num_online_event_registrations"] = $num_online_event_registrations->total;

  // number of unique online event registrations
  $query_sql = "SELECT COUNT(DISTINCT(f.uid)) as total FROM {flagging} f
  LEFT JOIN field_data_field_event_is_online p ON f.entity_id = p.entity_id
  WHERE f.fid = :fid AND p.entity_type = 'node' AND field_event_is_online_value = 1";
  $num_online_event_unique_registrations = db_query($query_sql, array(':fid' => $register_flag->fid))->fetch();
  $api_data["num_online_event_unique_registrations"] = $num_online_event_unique_registrations->total;

  // return api data in json format
  cache_set('tm-api-stats', $api_data, 'cache', time() + 1800); // 30 mins
  return $api_data;
}


function tm_api_chapters_lat_lon() {

  // check cache
  $cache = cache_get('tm-api-lat-lon', 'cache');
  if (!empty($cache)) {
    tm_api_return_json($cache->data);
  }

  // initialize api data
  $api_data = _get_empty_api_data();

  // get chapters
  $query = "SELECT nid FROM {node} n ".
              "WHERE n.type = :type ORDER BY n.title ASC";
  $chapter_ids = db_query($query, array(':type' => "chapter"))->fetchAll();

  $chapter_data = array();
  foreach($chapter_ids as $result) {
    $chapter = node_load($result->nid);
    if (isset($chapter->field_geomaplocation['und'][0])) {
      $point = $chapter->field_geomaplocation['und'][0]['geom'];
      $point = str_replace("POINT (", "", $point); // remove POINT ( text
      $point = str_replace(")", "", $point); // remove ) text
      $parts = explode(" ", $point); // split lat, lon
      $lat = $parts[1];
      $lon = $parts[0];
    } else {
      $lat = null;
      $lon = null;
    }

    $shortcode = $chapter->field_chapter_shortcode[LANGUAGE_NONE][0]['safe_value'];
    $color = $chapter->field_chapter_color[LANGUAGE_NONE][0]['rgb'];
    $path = drupal_get_path_alias("node/" . $chapter->nid);

    $chapter_data[] = array("title" => $chapter->title, "lat" => $lat, "lon" => $lon, "shortcode" => $shortcode, "color" => $color, "path" => $path);
  }

  $api_data["chapters"] = $chapter_data;
  cache_set('tm-api-lat-lon', $api_data, 'cache', time() + 300); // 5 mins
  tm_api_return_json($api_data);

}

function tm_api_events() {

  $limit = 1000; // default limit
  if (isset($_GET["limit"])) {
    $limit = intval($_GET["limit"]);
  }

  $cache = cache_get('tm-api-events-' . $limit, 'cache');
  if (!empty($cache)) {
    tm_api_return_json($cache->data);
  }

  global $conf;

  // initialize api data
  $api_data = _get_empty_api_data();

  $query = "SELECT entity_id FROM field_data_field_event_date WHERE entity_type = 'node' and bundle = 'event' and field_event_date_value > DATE_SUB(NOW(), INTERVAL 1 DAY) ORDER BY field_event_date_value ASC";

  $event_ids = db_query_range($query, 0, $limit)->fetchAll();
  $event_data = array();
  foreach($event_ids as $result) {

    // don't show preview events
    if (tm_events_is_preview_mode($result->entity_id)) {
      continue;
    }

    // get information about event
    $event = node_load($result->entity_id);

    // get chapter
    $chapter_name = null;
    if (sizeof($event->field_chapter) > 0) {
      $chapter = node_load($event->field_chapter[LANGUAGE_NONE][0]['target_id']);
      $chapter_name = $chapter->title;
    }

    // event image
    $event_image_url = $conf["tm_images_default_field_image"]; // default
    if (sizeof($event->field_image) > 0) {
      $event_image_url = $event->field_image[LANGUAGE_NONE][0]['uri'];
    }
    $event_image_url = image_style_url("banner", _tm_events_get_default_image($event_image_url, $event->nid));

    // event location
    $event_location = null;
    if (isset($event->field_location[LANGUAGE_NONE][0]['safe_value'])) {
      $event_location = $event->field_location[LANGUAGE_NONE][0]['safe_value'];
    }

    // event summary
    $event_summary = null;
    if (isset($event->body[LANGUAGE_NONE][0]['safe_value'])) {
      $event_summary = $event->body[LANGUAGE_NONE][0]['safe_value'];
    }

    // event url
    $event_url = $conf["tm_email_server_http"] . "://" . $_SERVER["SERVER_NAME"] . "/" . drupal_get_path_alias('node/' . $event->nid);

    $event_data[] = array("title" => $event->title, 
        "chapter_name" => $chapter_name,
        "date_time" => $event->field_event_date[LANGUAGE_NONE][0]['value'],
        "location" => $event_location,
        "venue_name" => $event->field_event_venue_name[LANGUAGE_NONE][0]['safe_value'],
        "summary" => $event_summary,
        "image_url" => $event_image_url,
        "url" => $event_url);
  }

  $api_data["events"] = $event_data; 
  cache_set('tm-api-events-' . $limit, $api_data, 'cache', time() + 300); // 5 mins
  tm_api_return_json($api_data);

}

function tm_api_members_in_country_count() {

  // initialize api data
  $api_data = array("message" => null, "error" => null, "success" => true);

  // check we got country codes
  if (!isset($_GET["countries"])) {
    $api_data["error"] = "Need to provide country code. Example: ?countries=US,CA";
    $api_data["success"] = false;
    tm_api_return_json($api_data);
  }

  // country code 
  $country_codes = explode(",", urldecode($_GET["countries"]));
  sort($country_codes);
  $cache_key = 'tm-api-member-count-' . strtolower(implode("-", $country_codes)); // ie: tm-api-member-count-US-CA

  // check cache
  $cache = cache_get($cache_key, 'cache');
  if (!empty($cache)) {
    tm_api_return_json($cache->data);
  }

  // Case 1. If countries=ALL then return total number of members
  if (strtolower($_GET["countries"]) == "all") {
    $query = "SELECT COUNT(*) amount FROM {users} u";
    $num_members = db_query($query)->fetch();
    $api_data["country_count"] = array("ALL" => $num_members->amount);
    $api_data["total_count"] = $num_members->amount;
    cache_set($cache_key, $api_data, 'cache', time() + 3600); // 1 hr
    tm_api_return_json($api_data);
    return;
  } 
  
  // Case 2. Calculate reach in each city
  $signup_flag = flag_get_flag('signup');

  // country count (grouped)
  $sql_query = "SELECT COUNT(*) member_count, country_iso2 FROM (SELECT DISTINCT(uid) as user_uid, field_country_iso2 AS country_iso2 FROM field_data_field_country c LEFT JOIN flagging f ON f.entity_id = c.entity_id WHERE f.fid = :fid AND c.bundle = 'chapter' AND c.field_country_iso2 IN (:country_codes) UNION SELECT DISTINCT(entity_id) AS user_uid, field_user_country_iso2 AS country_iso2 FROM field_data_field_user_country WHERE entity_type = 'user' AND field_user_country_iso2 in (:country_codes)) AS uids GROUP BY country_iso2";
  $result = db_query($sql_query, array(':fid' => $signup_flag->fid, ':country_codes' => $country_codes))->fetchAll();

  $counts = array();
  foreach($result as $row) {
    $counts[$row->country_iso2] = $row->member_count;
  }
  $api_data["country_count"] = $counts; 

  // total count (non grouped)
  $sql_query = "SELECT COUNT(*) member_count FROM (SELECT DISTINCT(uid) as user_uid FROM field_data_field_country c LEFT JOIN flagging f ON f.entity_id = c.entity_id WHERE f.fid = :fid AND c.bundle = 'chapter' AND c.field_country_iso2 IN (:country_codes) UNION SELECT DISTINCT(entity_id) AS user_uid FROM field_data_field_user_country WHERE entity_type = 'user' AND field_user_country_iso2 in (:country_codes)) AS uids";
  $result = db_query($sql_query, array(':fid' => $signup_flag->fid, ':country_codes' => $country_codes))->fetch();
  $api_data["total_count"] = $result->member_count;

  // set cache and return results
  cache_set($cache_key, $api_data, 'cache', time() + 3600); // 1 hr
  tm_api_return_json($api_data);

}

function tm_api_organizations_in_country_count() {

  // initialize api data
  $api_data = array("message" => null, "error" => null, "success" => true);

  // check we got country codes
  if (!isset($_GET["countries"])) {
    $api_data["error"] = "Need to provide country code. Example: ?countries=US,CA";
    $api_data["success"] = false;
    tm_api_return_json($api_data);
  }

  // country code 
  $country_codes = explode(",", urldecode($_GET["countries"]));
  sort($country_codes);
  $cache_key = 'tm-api-company-count-' . strtolower(implode("-", $country_codes)); // ie: tm-api-member-count-US-CA

  // check cache
  $cache = cache_get($cache_key, 'cache');
  if (!empty($cache)) {
    tm_api_return_json($cache->data);
  }

  // Case 1. If countries=ALL then return total number of members
  if (strtolower($_GET["countries"]) == "all") {
    $query = "SELECT COUNT(*) amount FROM {node} n ".
              "WHERE n.type = :type";
    $num_organizations = db_query($query, array(':type' => "organization"))->fetch();
    $api_data["country_count"] = array("ALL" => $num_organizations->amount);
    $api_data["total_count"] = $num_organizations->amount;
    // set cache and return results
    cache_set($cache_key, $api_data, 'cache', time() + 3600); // 1 hr
    tm_api_return_json($api_data);
    return;
  }

  // Case 2. Calulate reach in each city
  $signup_flag = flag_get_flag('signup');

  // country count (grouped)
  $sql_query = "SELECT COUNT(*) AS organization_count, field_country_iso2 AS country_iso2 FROM  field_data_field_country WHERE bundle = 'organization' AND field_country_iso2 in (:country_codes) GROUP BY country_iso2";

  $result = db_query($sql_query, array(':country_codes' => $country_codes))->fetchAll();

  $counts = array();
  foreach($result as $row) {
    $counts[$row->country_iso2] = $row->organization_count;
  }
  $api_data["country_count"] = $counts; 

  // total count (non grouped)
  $sql_query = "SELECT COUNT(*) AS organization_count FROM  field_data_field_country WHERE bundle = 'organization' AND field_country_iso2 in (:country_codes)";
  $result = db_query($sql_query, array(':country_codes' => $country_codes))->fetch();
  $api_data["total_count"] = $result->organization_count; 

  // set cache and return results
  cache_set($cache_key, $api_data, 'cache', time() + 3600); // 1 hr
  tm_api_return_json($api_data);

}

function tm_api_chapter_leaders() {

  // check cache
  $cache = cache_get('tm-api-chapter-leaders', 'cache');
  if (!empty($cache)) {
    tm_api_return_json($cache->data);
  }

  // initialize api data
  $api_data = _get_empty_api_data();

  // get leaders chapters, ordered by number of followers
  $query = "SELECT field_chapter_leaders_target_id AS uid, n.nid, n.title FROM field_data_field_chapter_leaders fd LEFT JOIN node n ON fd.entity_id = n.nid WHERE fd.bundle = 'chapter' AND fd.deleted = 0 ORDER BY uid DESC";
  $chapter_leaders = db_query($query)->fetchAll();

  global $conf;
  $leader_data = array();
  $uids = array();
  foreach($chapter_leaders as $result) {

    // distinct uids
    if (in_array($result->uid, $uids)) {
      continue;
    }
    $uids[] = $result->uid;

    $leader = user_load($result->uid);

    // get profile url
    if (isset($leader->field_avatar[LANGUAGE_NONE][0]['uri'])) {
      $image_url = image_style_url("avatar", $leader->field_avatar[LANGUAGE_NONE][0]['uri']);
    } else {
      $default_image_uri = _tm_users_get_default_avatar($conf["tm_images_default_field_avatar"], $leader->uid);
      $image_url = image_style_url("avatar", $default_image_uri);
    }

    // set chapter from result, or home chapter if user has one
    $chapter_title = $result->title; // default
    if (sizeof($leader->field_home_chapter) > 0) {
      $home_chapter_id = $leader->field_home_chapter[LANGUAGE_NONE][0]['target_id'];
      $home_chapter = node_load($home_chapter_id);
      $chapter_title = $home_chapter->title;
    }

    // other details
    $first_name = $leader->field_user_first_name['und'][0]['value'];
    $last_name = $leader->field_user_last_name['und'][0]['value'];
    $profile_path = drupal_get_path_alias("user/" . $leader->uid);

    $leader_data[] = array("name" => $first_name . " " . $last_name, "chapter_title" => $chapter_title, "avatar_url" => $image_url, "profile_path" => $profile_path);
  }

  $api_data["chapter_leaders"] = $leader_data;
  cache_set('tm-api-chapter-leaders', $api_data, 'cache', time() + 900); // 15 mins
  tm_api_return_json($api_data);

}

function tm_api_chapter_json() {

  // check shortcode
  if (!isset($_GET["shortcode"])) {
      $api_data = _get_empty_api_data();
      $api_data["error"] = "Requires shortcode";
      $api_data["success"] = false;
      tm_api_return_json($api_data);
      return;
  }

  // get shortcode (3 letters)
  $shortcode = substr(strtoupper($_GET["shortcode"]), 0, 3);

  // check cache
  $cache = cache_get('tm-api-chapter-json-' . $shortcode, 'cache');
  if (!empty($cache)) {
    if (!isset($_GET["nocache"])) {
      tm_api_return_json($cache->data);
    }
  }

  // initialize api data
  $api_data = _get_empty_api_data();
  $api_data["chapter_json"] = null; // default no value

  // get chapter shortcodes
  $shortcodes = tm_chapters_get_all_chapter_shortcodes();

  // find chapter
  $key = array_search($shortcode, $shortcodes);
  $found_chapter = false;
  if ($key !== FALSE) {
    $chapter_nid = $key;
    $chapter = node_load($chapter_nid);
    if ($chapter != null) {
      $found_chapter = true;
      if (isset($chapter->field_chapter_api_public_json[LANGUAGE_NONE][0]['value'])) {
        $json = trim($chapter->field_chapter_api_public_json[LANGUAGE_NONE][0]['value']);
        $json_decoded = json_decode($json);
        if ($json_decoded == null) {
          $api_data["error"] = "Invalid JSON";
          $api_data["success"] = false;
          $api_data["chapter_json"] = null;
        } else {
          $api_data["chapter_json"] = json_decode($json);
        }
      }
    }
  }

  // if chapter could not be found
  if (!$found_chapter) {
    $api_data["error"] = "No chapter with shortcode " . $shortcode;
    $api_data["success"] = false;
    $api_data["chapter_json"] = null;
  }
 
  cache_set('tm-api-chapter-json-' . $shortcode, $api_data, 'cache', time() + 60); // 60 seconds
  tm_api_return_json($api_data);
}

// Initial API data
function _get_empty_api_data() {
  return array("message" => null, "error" => null, "success" => true);
}

// print api data as JSON object
function tm_api_return_json($api_data) {

  // check if we are embedding in a jsonp callback
  $query = drupal_get_query_parameters();
  if (isset($query["callback"])) {
    // jsonp callback
    // ie: mycallback({json_data});
    drupal_add_http_header('Content-Type', 'application/javascript');
    print($query["callback"] . "(" . json_encode($api_data) . ");");
  } else {
    // standard json
    // ie: {json_data}
    print(json_encode($api_data));
  }
  drupal_exit();
}

// Replace api data in text fields
// ie: "There are over __STATS_NUM_MEMBERS__ members"
function tm_api_replace_text_fields($api_data, $element) {

  // parse text
  $element = str_replace("__STATS_NUM_MEMBERS__", number_format($api_data["num_members"]), $element);
  $element = str_replace("__STATS_NUM_MEMBERS_ROUNDED__", number_format(floor(round($api_data["num_members"]/1000,4))*1000), $element);
  $element = str_replace("__STATS_NUM_COUNTRIES__", $api_data["num_member_countries"], $element);
  $element = str_replace("__STATS_NUM_CHAPTER_COUNTRIES__", $api_data["num_chapter_countries"], $element);
  $element = str_replace("__STATS_NUM_CHAPTERS__", number_format($api_data["num_chapters"]), $element);
  $element = str_replace("__STATS_NUM_ORGANIZATIONS__", number_format($api_data["num_organizations"]), $element);
  $element = str_replace("__STATS_NUM_ORGANIZATIONS_ROUNDED__", number_format(floor(round($api_data["num_organizations"]/1000,4))*1000), $element);
  $element = str_replace("__STATS_NUM_EVENTS__", number_format($api_data["num_events"]), $element);
  $element = str_replace("__STATS_NUM_CONNECTIONS__", number_format($api_data["num_connections"]), $element);
  $element = str_replace("__STATS_NUM_CONNECTIONS_ROUNDED__", number_format(floor(round($api_data["num_connections"]/1000,4))*1000), $element);
  $element = str_replace("__STATS_NUM_CHAPTER_LEADERS__", number_format($api_data["num_chapter_leaders"]), $element);
  $element = str_replace("__STATS_NUM_EVENTS_PAST_YEAR__", number_format($api_data["num_events_past_year"]), $element);
  $element = str_replace("__STATS_NUM_EVENT_REGISTRATIONS__", number_format($api_data["num_event_registrations"]), $element);
  $element = str_replace("__STATS_NUM_EVENT_UNIQUE_REGISTRATIONS__", number_format($api_data["num_event_unique_registrations"]), $element);
  $element = str_replace("__STATS_NUM_EVENT_REGISTRATIONS_PAST_YEAR__", number_format($api_data["num_event_registrations_past_year"]), $element);
  $element = str_replace("__STATS_NUM_EVENTS_TOTAL__", number_format($api_data["num_events"]), $element);
  $element = str_replace("__STATS_NUM_LIVESTREAM_EVENTS_TOTAL__", number_format($api_data["num_livestream_events"]), $element);
  $element = str_replace("__STATS_NUM_LIVESTREAM_EVENT_REGISTRATIONS__", number_format($api_data["num_livestream_event_registrations"]), $element);
  $element = str_replace("__STATS_NUM_ONLINE_EVENTS_TOTAL__", number_format($api_data["num_online_events"]), $element);
  $element = str_replace("__STATS_NUM_ONLINE_EVENT_REGISTRATIONS__", number_format($api_data["num_online_event_registrations"]), $element);
  $element = str_replace("__STATS_NUM_ONLINE_EVENT_UNIQUE_REGISTRATIONS__", number_format($api_data["num_online_event_unique_registrations"]), $element);

  // subscribers
  if (isset($api_data["num_subscribers"])) {
      $element = str_replace("__STATS_NUM_SUBSCRIBERS__", number_format($api_data["num_subscribers"]), $element);
  }

  return $element;

}
