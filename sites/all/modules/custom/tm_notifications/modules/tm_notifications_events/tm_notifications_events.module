<?php
/**
 * @file
 * Code for the TM Notifications Events feature.
 */

include_once 'tm_notifications_events.features.inc';

/**
 * Implements hook_tm_notif_info()
 */
function tm_notifications_events_tm_notif_info() {
  $notification = array();

  // EVENT ORGANISER NOTIFICATIONS
  ////////////////////////////////

  $notification['events_register_flag'] = array(
    'title' => 'New Registration',
    'description' => '[Chapter Leaders] Notify when someone registers for my event',
    'use_cron' => FALSE,
    'tokens' => array(
      // The token types that have specific context. Can be multiple token types like 'term' and/or 'user'
      'token_types' => array('user', 'current-user', 'node'),
      // A boolean TRUE or FALSE whether to include 'global' context tokens like [current-user:*] or [site:*]. Defaults to TRUE.
      'global_types' => FALSE,
      // A boolean whether to include the 'Click this token to insert in into the the focused textfield' JavaScript functionality. Defaults to TRUE.
      'click_insert' => TRUE
    )
  );

  $notification['events_register_unflag'] = array(
    'title' => 'Member Unregistered',
    'description' => '[Chapter Leaders] Notify when someone unregisters for my event',
    'use_cron' => FALSE,
    'tokens' => array(
      // The token types that have specific context. Can be multiple token types like 'term' and/or 'user'
      'token_types' => array('user', 'current-user', 'node'),
      // A boolean TRUE or FALSE whether to include 'global' context tokens like [current-user:*] or [site:*]. Defaults to TRUE.
      'global_types' => FALSE,
      // A boolean whether to include the 'Click this token to insert in into the the focused textfield' JavaScript functionality. Defaults to TRUE.
      'click_insert' => TRUE
    )
  );

  $notification['events_waitlist_flag'] = array(
    'title' => 'New Waitlist',
    'description' => '[Chapter Leaders] Notify when someone registers for waitlist to my event',
    'use_cron' => FALSE,
    'tokens' => array(
      // The token types that have specific context. Can be multiple token types like 'term' and/or 'user'
      'token_types' => array('user', 'current-user', 'node'),
      // A boolean TRUE or FALSE whether to include 'global' context tokens like [current-user:*] or [site:*]. Defaults to TRUE.
      'global_types' => FALSE,
      // A boolean whether to include the 'Click this token to insert in into the the focused textfield' JavaScript functionality. Defaults to TRUE.
      'click_insert' => TRUE
    )
  );

  $notification['events_waitlist_unflag'] = array(
    'title' => 'Member Unwaitlist',
    'description' => '[Chapter Leaders] Notify when someone unregisters from the waitlist to my event',
    'use_cron' => FALSE,
    'tokens' => array(
      // The token types that have specific context. Can be multiple token types like 'term' and/or 'user'
      'token_types' => array('user', 'current-user', 'node'),
      // A boolean TRUE or FALSE whether to include 'global' context tokens like [current-user:*] or [site:*]. Defaults to TRUE.
      'global_types' => FALSE,
      // A boolean whether to include the 'Click this token to insert in into the the focused textfield' JavaScript functionality. Defaults to TRUE.
      'click_insert' => TRUE
    )
  );


  // USER NOTIFICATIONS
  //////////////////////

  $notification['events_register_flag_user'] = array(
    'title' => 'New Registration',
    'description' => 'Notify when you register for an event',
    'use_cron' => FALSE,
    'tokens' => array(
      // The token types that have specific context. Can be multiple token types like 'term' and/or 'user'
      'token_types' => array('user', 'current-user', 'node'),
      // A boolean TRUE or FALSE whether to include 'global' context tokens like [current-user:*] or [site:*]. Defaults to TRUE.
      'global_types' => FALSE,
      // A boolean whether to include the 'Click this token to insert in into the the focused textfield' JavaScript functionality. Defaults to TRUE.
      'click_insert' => TRUE
    )
  );

  $notification['events_register_unflag_user'] = array(
    'title' => 'Member Unregistered',
    'description' => 'Notify when your unregister from an event',
    'use_cron' => FALSE,
    'tokens' => array(
      // The token types that have specific context. Can be multiple token types like 'term' and/or 'user'
      'token_types' => array('user', 'current-user', 'node'),
      // A boolean TRUE or FALSE whether to include 'global' context tokens like [current-user:*] or [site:*]. Defaults to TRUE.
      'global_types' => FALSE,
      // A boolean whether to include the 'Click this token to insert in into the the focused textfield' JavaScript functionality. Defaults to TRUE.
      'click_insert' => TRUE
    )
  );

  $notification['events_waitlist_flag_user'] = array(
    'title' => 'New Waitlist',
    'description' => 'Notify when you join the waitlist to an event',
    'use_cron' => FALSE,
    'tokens' => array(
      // The token types that have specific context. Can be multiple token types like 'term' and/or 'user'
      'token_types' => array('user', 'current-user', 'node'),
      // A boolean TRUE or FALSE whether to include 'global' context tokens like [current-user:*] or [site:*]. Defaults to TRUE.
      'global_types' => FALSE,
      // A boolean whether to include the 'Click this token to insert in into the the focused textfield' JavaScript functionality. Defaults to TRUE.
      'click_insert' => TRUE
    )
  );

  $notification['events_waitlist_unflag_user'] = array(
    'title' => 'Member Unwaitlist',
    'description' => 'Notify you when you un-register from the waitlist to an event',
    'use_cron' => FALSE,
    'tokens' => array(
      // The token types that have specific context. Can be multiple token types like 'term' and/or 'user'
      'token_types' => array('user', 'current-user', 'node'),
      // A boolean TRUE or FALSE whether to include 'global' context tokens like [current-user:*] or [site:*]. Defaults to TRUE.
      'global_types' => FALSE,
      // A boolean whether to include the 'Click this token to insert in into the the focused textfield' JavaScript functionality. Defaults to TRUE.
      'click_insert' => TRUE
    )
  );
  
  return $notification;
}

/**
 * Implement hook_flag_flag()
 */
function tm_notifications_events_flag_flag($flag, $entity_id, $account, $flagging) {
  tm_notifications_events_handle_flagging("flag", $flag, $entity_id, $account, $flagging);
}

function tm_notifications_events_flag_unflag($flag, $entity_id, $account, $flagging) {
  tm_notifications_events_handle_flagging("unflag", $flag, $entity_id, $account, $flagging);
}

function tm_notifications_events_handle_flagging($flag_or_unflag, $flag, $entity_id, $account, $flagging) {

  global $conf;

  // only listen for register or waitlist
  if (($flag->name != 'event_register') and ($flag->name != 'event_waitlist')) {
    return;
  }

  // get the event that was flagged
  $event = node_load($entity_id);
  $event_url = drupal_get_path_alias('node/' . $event->nid);

  // get user and profile url of who flagged the event
  $profile_url = drupal_get_path_alias("user/" . $account->uid);

  // TM_PAYMENTS
  // Check if member also paid for event via tm_payments
  // NOTE: This method relies on static pricing.
  // If we move to dynamic pricing (ie: early-bird, allotments) this will need to be revised.
  $paid_for_event = false;
  $event_payment_text = null;
  if (module_exists("tm_payments")) {

    // Check pricing is enabled
    if (_tm_payments_is_payment_enabled($event)) {

      // Check if we paid
      $paid_flag = flag_get_flag('event_paid');
      $paid_for_event = ($paid_flag && $paid_flag->is_flagged($event->nid, $account->uid));

      // Get pricing
      if ($paid_for_event) {
        try {
          // fetch pricing from static variable set in tm_payments_process_event_payment
          $event_payment_text = drupal_static("tm_payments_payment_text");
          drupal_static_reset("tm_payments_payment_text");
        } catch (Exception $e) {
          // do nothing, we don't want to stop other actions in the middle of payment
        }
      }
    }
      
  }

  // if registered to event by moderator, add moderator name and message
  // set in tm_events_moderation_events_register_member()
  $static_register_member_moderator_first_name = &drupal_static("tm_register_member_moderator_first_name");
  $static_register_member_moderator_last_name = &drupal_static("tm_register_member_moderator_last_name");
  $static_register_member_moderator_message = &drupal_static("tm_register_member_moderator_message");

  // User Registered for Event
  // Or user was added by a moderator
  if (($GLOBALS['user']->uid == $flagging->uid) or ($static_register_member_moderator_first_name != null) or ($event_payment_text != null)) {

    // get profile full name
    $profile_full_name = tm_users_get_full_name($account->uid);

    // STEP 1
    // Notify the event organisers
    // Ok, now notify everyone we need to

    // Default text
    $register_action_headline = "A member just registered.";
    $register_action_subject = "just registered for";
    $register_action_body = "just signed up for your event";
    $register_payment_note = "";

    // Adjust text for paid ticket
    if ($paid_for_event && $event_payment_text != null) {
      $register_action_headline = "A member purchased a ticket.";
      $register_action_subject = "purchased a ticket to";
      $register_action_body = "just purchased a ticket to your event";
      $register_payment_note = "<strong>Payment received:</strong> " . $event_payment_text . " (excludes processing fees)<br><br>";
    }

     // let other organizers know who registered this member
    $registered_by_message = "";
    if ($static_register_member_moderator_first_name != null) {
      $registered_by_message = "This member was registered to the event by " . $static_register_member_moderator_first_name . " " . $static_register_member_moderator_last_name . ".<br><br>";
    }

    // generate member html
    $account_loaded = user_load($account->uid);
    $member_widget = tm_notifications_render_member_html($account_loaded);

    // get list of uids to notify
    $notify_ids = tm_notifications_events_get_organizer_notify_ids($event);

    // notify organizers
    foreach ($notify_ids as $notify_id) {

      // load the user to notify
      $notify_user = user_load($notify_id);

      // events_register_flag
      if (($flag_or_unflag == "flag") && ($flag->name == 'event_register')) {
        $hero_headline = tm_notifications_render_hero_headline_html($register_action_headline);
        tm_notifications_notify('events_register_flag', $notify_user, array('node' => $event, 'user' => $notify_user, '__PROFILE_URL__' => $profile_url, '__PROFILE_UID__' => $account->uid, '__EVENT_URL__' => $event_url, '__REGISTER_ACTION_SUBJECT__' => $register_action_subject, '__REGISTER_ACTION_BODY__' => $register_action_body, '__REGISTER_PAYMENT_NOTE__' => $register_payment_note, '__PROFILE_FULL_NAME__' => $profile_full_name, '__REGISTERED_BY_MESSAGE__' => $registered_by_message, '__HERO_HEADLINE__' => $hero_headline, '__MEMBER_WIDGET__' => $member_widget));
      }

      // events_register_unflag
      if (($flag_or_unflag == "unflag") && ($flag->name == 'event_register')) {
        $hero_headline = "";
        tm_notifications_notify('events_register_unflag', $notify_user, array('node' => $event, 'user' => $notify_user, '__PROFILE_URL__' => $profile_url, '__PROFILE_UID__' => $account->uid, '__EVENT_URL__' => $event_url, '__PROFILE_FULL_NAME__' => $profile_full_name, '__HERO_HEADLINE__' => $hero_headline, '__MEMBER_WIDGET__' => $member_widget));
      }

      // waitlist_register_flag
      if (($flag_or_unflag == "flag") && ($flag->name == 'event_waitlist')) {
        $hero_headline = "";
        tm_notifications_notify('events_waitlist_flag', $notify_user, array('node' => $event, 'user' => $notify_user, '__PROFILE_URL__' => $profile_url, '__PROFILE_UID__' => $account->uid, '__EVENT_URL__' => $event_url, '__PROFILE_FULL_NAME__' => $profile_full_name, '__HERO_HEADLINE__' => $hero_headline, '__MEMBER_WIDGET__' => $member_widget));
      }

       // waitlist_register_unflag
      if (($flag_or_unflag == "unflag") && ($flag->name == 'event_waitlist')) {
        $hero_headline = "";
        tm_notifications_notify('events_waitlist_unflag', $notify_user, array('node' => $event, 'user' => $notify_user, '__PROFILE_URL__' => $profile_url, '__PROFILE_UID__' => $account->uid, '__EVENT_URL__' => $event_url, '__PROFILE_FULL_NAME__' => $profile_full_name, '__HERO_HEADLINE__' => $hero_headline, '__MEMBER_WIDGET__' => $member_widget));
      }
      
    }
  }

  // STEP 2
  // Notify the member who has been flagged
  $notify_user = user_load($account->uid);

  $event_date_time = strtotime( $event->field_event_date['und'][0]['value']);
  $nice_date = date('l j F', $event_date_time );
  $event_start = date('g:ia', $event_date_time );
  $event_time = "<br>Date: " . $nice_date . "\n<br>Start: " . $event_start;

  // if online event, show all timezones
  if (isset($event->field_event_is_online[LANGUAGE_NONE][0]['value'])) { 
    if ($event->field_event_is_online[LANGUAGE_NONE][0]['value'] == true) {
      $event_time = "<br>";
      $event_time .= tm_events_render_timezones($account, $event);
    }
  }

  // events_register_flag
  $map_link_url = "";
  if ($event->field_map_link != null) {
    $map_link_url = $event->field_map_link['und'][0]['url'];
  }

  if (($flag_or_unflag == "flag") && ($flag->name == 'event_register')) {

    // Get instructions
    $online_instructions = "";
    if (isset($event->field_event_online_instructions[LANGUAGE_NONE][0]['value'])) {
       $online_instructions = trim(strip_tags($event->field_event_online_instructions[LANGUAGE_NONE][0]['value']));
    }

    if ($online_instructions != "") {
       // add markdown support, or add line breaks
      if (tm_base_check_markdown_permission("event", $event->nid)) {
        $online_instructions = $online_instructions;
        $online_instructions = tm_base_parsedown($online_instructions, null, false);
        $online_instructions = str_replace("\n", "", $online_instructions);
      } else {
        $online_instructions = str_replace("\n", "<br>", $online_instructions); // add line breaks
        $online_instructions = preg_replace("/[-]{4,10}/", "<hr>", $online_instructions); // replace ---- with hr
        $online_instructions = tm_base_linkify($online_instructions, ["http", "https", "mail", "twitter"]); // add links
      }
      $online_instructions_heading = "👉 How to join us LIVE";
      if (isset($conf["tm_event_online_reminder_instructions_heading"])) {
        $online_instructions_heading = $conf["tm_event_online_reminder_instructions_heading"];
      }
      $online_instructions = "<br>" . $online_instructions_heading . "<p>" . $online_instructions . "</p>";
    }

    // register event message
    $message = "";
    if (isset($event->field_register_event_message['und'][0]['value'])) {
      $message = trim(strip_tags(check_plain($event->field_register_event_message['und'][0]['value'])));
      $message = str_replace("\n", "<br>", $message); // add line breaks
      if ($message != "") {
        $message = "<br><strong>Additional Information</strong>:<p>" . $message . "</p>";
        if ($online_instructions == "") {
          $message = "<br>" . $message;
        }
      }
    }

    // add additional line break if no message and online instructions
    if (($message == "") and ($online_instructions == "")) {
      $message = "<br>";
    }

    // Adjust text for paid ticket
    $member_register_subject = "You are now registered for";
    $member_register_intro = "You are now signed up to attend:";

    // If registered by chapter leader or moderator
    if ($static_register_member_moderator_first_name != null) {
      $member_register_subject = $static_register_member_moderator_first_name . " registered you for";
      $member_register_intro = $static_register_member_moderator_first_name . " has registered you for";
    }

    $member_register_payment_note = "";
    if ($paid_for_event && $event_payment_text != null) {

      $member_register_subject = "Your ticket to";
      $member_register_intro = "You have purchased a ticket to the event:";

      // create payment note
      $member_register_payment_note = "<br><div style='background-color: #eee; border-radius: 4px; padding: 4px;'>";
      $member_register_payment_note .= $conf["tm_payments_receipt_details"];
      $member_register_payment_note .= "<br><strong>Payment received:</strong> " . $event_payment_text;
      $member_register_payment_note .= "<br><strong>Payment date:</strong> " . date('d F Y') . "<br>";
      $member_register_payment_note .= "<br><strong><a href='__SERVER_HTTP__://__SERVER_NAME__/checkout/my-payments'>View receipt details</a></strong><br>";
      $member_register_payment_note .= "</div>";
    }

    // Let the user know if they were automatically registered from the waitlist
    // fetch static variable set in _tm_events_auto_register_from_waitlist()
    $tm_flagged_by_auto_register_waitlist = drupal_static("tm_flagged_by_auto_register_waitlist");
    drupal_static_reset("tm_flagged_by_auto_register_waitlist");
    if ($tm_flagged_by_auto_register_waitlist != null) {
      if ($tm_flagged_by_auto_register_waitlist == true) {
        $member_register_intro = "<strong>We have automatically registered you due to a cancellation of another member. You were next on the waitlist, so we hope you can make it.</strong><br><br>" . $member_register_intro;
      }
    }
   
    // calendar link
    $event_calendar_link = "events/download-ical/" . $event->nid;

    // add moderator message
    $moderator_message = "";
    if ($static_register_member_moderator_message != null) {
      $moderator_message = $static_register_member_moderator_message;
    }

    // choose a random headline
    $hero_headline = "";
    if (isset($conf["tm_event_register_headlines"])) {
      $headlines = $conf["tm_event_register_headlines"];
      $headline = $headlines[array_rand($headlines)];
      $hero_headline = tm_notifications_render_hero_headline_html($headline);
    }

    tm_notifications_notify('events_register_flag_user', $notify_user, array('node' => $event, 'user' => $notify_user, '__PROFILE_URL__' => $profile_url, '__PROFILE_UID__' => $account->uid, '__EVENT_URL__' => $event_url, '__MAP_LINK__' => $map_link_url, '__EVENT_DATE__' => $nice_date, '__EVENT_TIME__' => $event_time, '__ONLINE_INSTRUCTIONS__' => $online_instructions, '__REGISTER_EVENT_MESSAGE__' => $message, '__REGISTER_SUBJECT__' => $member_register_subject, '__REGISTER_INTRO__' => $member_register_intro, '__REGISTER_PAYMENT_NOTE__' => $member_register_payment_note, '__EVENT_CALENDAR_LINK__' => $event_calendar_link, '__MODERATOR_MESSAGE__' => $moderator_message, '__HERO_HEADLINE__' => $hero_headline));
  }

  // events_register_unflag
  if (($flag_or_unflag == "unflag") && ($flag->name == 'event_register')) {
    tm_notifications_notify('events_register_unflag_user', $notify_user, array('node' => $event, 'user' => $notify_user, '__PROFILE_URL__' => $profile_url, '__PROFILE_UID__' => $account->uid, '__EVENT_URL__' => $event_url, '__EVENT_DATE__' => $nice_date, '__EVENT_TIME__' => $event_time));
  }

  // waitlist_register_flag
  if (($flag_or_unflag == "flag") && ($flag->name == 'event_waitlist')) {

    // waitlist event message
    $message = "";
    if (isset($event->field_waitlist_event_message['und'][0]['value'])) {
      $message = trim(strip_tags(check_plain($event->field_waitlist_event_message['und'][0]['value'])));
      $message = str_replace("\n", "<br>", $message); // add line breaks
      if ($message != "") {
        $message = "<br><strong>Additional Information</strong>: <p>" . $message . "</p>";
      }
    }

    $hero_headline = tm_notifications_render_hero_headline_html("You're on the waitlist.");
    tm_notifications_notify('events_waitlist_flag_user', $notify_user, array('node' => $event, 'user' => $notify_user, '__PROFILE_URL__' => $profile_url, '__PROFILE_UID__' => $account->uid, '__EVENT_URL__' => $event_url, '__EVENT_DATE__' => $nice_date, '__EVENT_TIME__' => $event_time, '__WAITLIST_EVENT_MESSAGE__' => $message, '__HERO_HEADLINE__' => $hero_headline));
  }

  // waitlist_register_unflag
  if (($flag_or_unflag == "unflag") && ($flag->name == 'event_waitlist')) {

    // If user being moved from waitlist to register, then don't send un-waitlist emails
    // In tm_events_rsvp_form_submit we set register flag, then unset waitlist flag
    // So we can use the register flag to determin if this case exists
    $registered_flag = flag_get_flag('event_register');
    $registered_for_event = ($registered_flag && $registered_flag->is_flagged($event->nid, $account->uid));

    if (!$registered_for_event) {
      tm_notifications_notify('events_waitlist_unflag_user', $notify_user, array('node' => $event, 'user' => $notify_user, '__PROFILE_URL__' => $profile_url, '__PROFILE_UID__' => $account->uid, '__EVENT_URL__' => $event_url, '__EVENT_DATE__' => $nice_date, '__EVENT_TIME__' => $event_time));
    }
  }


}

/*
 * Helper method to get list of uids to notify about an event
 * either: 
 * case 1: event with organizers -> organizers
 * case 2: event with no organizers and a chapter -> chapter leaders
 * case 3: event with no organizers and no chapter -> event creator
 */
function tm_notifications_events_get_organizer_notify_ids($event) {

  $notify_ids = array();

  // case 1: event with organizers -> organizers
  if (sizeof($event->field_organizer) > 0) {
    foreach ($event->field_organizer['und'] as $organizer) {
      $notify_ids[] = $organizer['target_id'];
    }
  }

  // case 2: event with no organizers and a chapter -> chapter leaders
  if ((sizeof($event->field_organizer) == 0) and (sizeof($event->field_chapter) > 0)) {

    if (isset($event->field_chapter['und'])) {
      $chapter_id = $event->field_chapter['und'][0]['target_id'];
      $chapter = node_load($chapter_id);
    
      if (isset($chapter->field_chapter_leaders[LANGUAGE_NONE])) {
        foreach($chapter->field_chapter_leaders[LANGUAGE_NONE] as $chapter_leader) {
          $notify_ids[] = $chapter_leader['target_id'];
        }
      }
    }
  }

  // case 3: event with no organizers and no chapter -> event creator
  if ((sizeof($event->field_organizer) == 0) and (sizeof($event->field_chapter) == 0)) {
      $notify_ids[] = $event->uid;
  }

  // case 4: featured members and field_notify_featured_members is checked
  if (isset($event->field_notify_featured_members[LANGUAGE_NONE][0]['value'])) {
    if ($event->field_notify_featured_members[LANGUAGE_NONE][0]['value'] == true) {
      if (sizeof($event->field_event_featured_members) > 0) {
        foreach ($event->field_event_featured_members['und'] as $featured_member) {
          $notify_ids[] = $featured_member['target_id'];
        }
      }
    }
  }

  // case 5: event with no organizers and a company -> company managers
  if ((sizeof($event->field_organizer) == 0) and (sizeof($event->field_event_company) > 0)) {

    if (isset($event->field_event_company['und'])) {
      $company_id = $event->field_event_company['und'][0]['target_id'];
      $company = node_load($company_id);
    
      foreach ($company->field_owner[LANGUAGE_NONE] as $profile_owner) {
        $notify_ids[] = $profile_owner['target_id'];
      }
    }
  }

  // in case duplicate organiser are set - remove duplicate notify_ids
  $notify_ids = array_unique($notify_ids);

  // return user ids to notify
  return $notify_ids;
}
