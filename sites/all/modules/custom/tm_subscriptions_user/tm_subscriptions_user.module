<?php
/**
 * @file
 * Code for the tm_subscriptions_user feature.
 */

include_once 'tm_subscriptions_user.features.inc';

/**
 * @file
 * Code for the TM Subscriptions feature.
 */

include_once 'tm_subscriptions_user.permissions.inc';
include_once 'tm_subscriptions_user.display.inc';
include_once 'tm_subscriptions_user.helpers.inc';
include_once 'tm_subscriptions_user.pricing.inc';
include_once 'tm_subscriptions_user.notifications.inc';
include_once 'tm_subscriptions_user.footer.inc';

/*  
This module now relies on tm_checkout module which provides Stripe checkout and a payments table
*/

function tm_subscriptions_user_menu() {

	global $conf;

	$items = array();
  $items['membership/invite'] = array(
    'title' => 'Membership invitation',
    'page callback' => 'tm_subscriptions_user_invite_link',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

	return $items;
}

/**
 * Implement hook_ds_field_info()
 */
// see: https://ohthehugemanatee.org/blog/2014/04/02/how-to-create-a-custom-display-suite-field/
function tm_subscriptions_user_ds_fields_info($entity_type) {

  if ($entity_type != 'user') {
    return;
  }
  
  $fields = array();

  // call to action
  $fields['tm_ds_subscription_user_cta_ds'] = array(
    'title' => t('User Subscription CTA'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('user|*',),
    'function' => '_tm_subscriptions_user_cta_ds'
  );

  // show subscription badge
  $fields['tm_ds_subscription_user_badge_ds'] = array(
    'title' => t('User Subscription Badge'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('user|*',),
    'function' => '_tm_subscriptions_user_badge_ds'
  );

  return array($entity_type => $fields);
}

/**
 * Modify user
 */
function tm_subscriptions_user_user_view_alter(&$build) {

  global $conf;
  global $user;

  // check user logged in
  if (!(user_is_logged_in())) {
    return;
  }

  // check view mode
  if ($build['#view_mode'] != "full") {
    return;
  }

  // check object
  if ($build['#entity_type'] != "user") {
    return;
  }

  // get account
  $account = $build['#account'];

  if (tm_subscriptions_check_show_user_cta($account->uid, $user->uid)) {
    $hide_cta_cookie_name = $conf["tm_subscriptions_user_hide_cta_cookie"];
    drupal_add_js(array('tm_subscriptions_user' => array('hide_cta_cookie_name' => $hide_cta_cookie_name)), array('type' => 'setting'));
    drupal_add_js(drupal_get_path('module', 'tm_subscriptions_user') . '/js/tm_subscriptions_user_cta.js');
  }

}

/**
 * Modify node
 */
function tm_subscriptions_user_node_view_alter(&$build) {

  global $conf;
  global $user;

  // check user logged in
  if (!(user_is_logged_in())) {
    return;
  }

  // check view mode
  if ($build['#view_mode'] != "full") {
    return;
  }

  // check object
  if ((!isset($build['body']['#object'])) and (!isset($build['field_image']['#object']))) {
    return;
  }

  // get node
  if (isset($build['body']['#object'])) {
    $node = $build['body']['#object'];
  } else {
    $node = $build['field_image']['#object'];
  }

  // check object
  if (($node->type == "chapter") or ($node->type == "event")) {
   
    if (tm_subscriptions_check_show_user_cta($user->uid, $user->uid)) {
      $hide_cta_cookie_name = $conf["tm_subscriptions_user_hide_cta_cookie"];
      drupal_add_js(array('tm_subscriptions_user' => array('hide_cta_cookie_name' => $hide_cta_cookie_name)), array('type' => 'setting'));
      drupal_add_js(drupal_get_path('module', 'tm_subscriptions_user') . '/js/tm_subscriptions_user_cta.js');
    }
  }

}

/**
 * Customize user edit form 
 */
function tm_subscriptions_user_form_user_profile_form_alter(&$form, &$form_state, $form_id) {

  global $conf;
  global $user;

  // Only edit form if user is not logged in
  // Needed for simple_pass_reset to work
  if (!user_is_logged_in()) { return; }

  // Don't show if ajax request (ie: saving image)
  $ajax_request = false;
  if (strpos(current_path(), 'ajax') !== false) {
    $ajax_request = true;
  }

  // Show Account Details for subscribers
  $account = $form['#user'];

  // Show the receipt field if payment has been made and user does not have a subscription
  if (module_exists("tm_payments")) {
    if ((tm_checkout_user_has_made_payment($account->uid))) {
      if (($conf["tm_subscriptions_user_enabled"] == false) or (!tm_subscriptions_is_user_subscription_enabled($account->uid))) {
        unset($form['field_user_account_phone']); // hide phone
        unset($form['field_user_subscription_type']); // hide subscription type
        unset($form['field_user_subscription_date']); // hide subscription end date
        return;
      }
    }
  }

  // if tm_subscriptions_user not enabled, hide subscription fields
  if ($conf["tm_subscriptions_user_enabled"] == false) {
    field_group_hide_field_groups($form, array('group_user_account_details'));
    unset($form['field_user_subscription_type']); // hide subscription type
    unset($form['field_user_subscription_date']); // hide subscription end date
    return;
  }

  // Check moderator or admin
  $perm_is_moderator_or_admin = ((in_array("moderator", $user->roles)) || (in_array("administrator", $user->roles)));

  // Hide account details and subscription date if not a moderator or admin or not subscribed
  if ((!tm_subscriptions_is_user_subscription_enabled($account->uid)) and
    (!$perm_is_moderator_or_admin)) {

    field_group_hide_field_groups($form, array('group_user_account_details'));
    unset($form['field_user_subscription_date']); // hide subscription end date
    return;
  }

  // Set field group title
  $form['#groups']['group_user_account_details']->label = $conf["tm_subscriptions_user_label"] . " Details";

  // Include subscription date

  // check that user has subscription date
  $subscription_date = tm_subscriptions_user_get_subscription_date($account);
  $subscription_date_text = date('Y-m-d', strtotime($subscription_date));
  $expires_text = tm_subscriptions_user_get_subscription_expires_text($account);

  if ($subscription_date != "") {
    $subscription_message = "Your " . $conf["tm_subscriptions_user_label"] . " is registered until " . $subscription_date_text . " (" . $expires_text . ")";
    $form['#groups']['group_user_account_details']->format_settings['instance_settings']['description'] .= "<br>" . $subscription_message;
    if (!$ajax_request) { 
      drupal_set_message($subscription_message, 'help-tip');
    }
  }
 
  // Hide subscription type and end date
  if (!$perm_is_moderator_or_admin) {
    unset($form['field_user_subscription_type']); // hide subscription type
    unset($form['field_user_subscription_date']); // hide subscription end date
  } else {
    // if payment has been made, warn in toggle settings 
  }
}

/**
 * Enable subscription role when subscription flagged
 */
function tm_subscriptions_user_flag_flag($flag, $entity_id, $account, $flagging) {

  // only listen for subscription enabled
  if ($flag->name != 'user_subscription_enable') {
    return;
  }

  // add role
  $subscription_role = user_role_load_by_name('subscriber');
  user_multiple_role_edit(array($entity_id), 'add_role', $subscription_role->rid);

}

/**
 * Remove subscription role when subscription flagged
 */
function tm_subscriptions_user_flag_unflag($flag, $entity_id, $account, $flagging) {

  // only listen for subscription enabled
  if ($flag->name != 'user_subscription_enable') {
    return;
  }

  // remove role
  $subscription_role = user_role_load_by_name('subscriber');
  user_multiple_role_edit(array($entity_id), 'remove_role', $subscription_role->rid);
 
}

/**
 * Show the CTA if a member visits the /membership/invite link
 */
function tm_subscriptions_user_invite_link() {

  global $user;
  global $conf;

  // make sure we are logged in
  if (!user_is_logged_in()) {
    drupal_get_messages();
    drupal_set_message("Please <a href='user/login?destination=membership/invite'>sign in</a> to your account to access the " . $conf["tm_subscriptions_user_label"] . " invitation.", "help-tip");
    drupal_goto("/");
    return;
  }

  // load account
  $account = user_load($user->uid);

  // check subscriptions are enabled
  if ($conf["tm_subscriptions_user_enabled"] == false) {
    drupal_get_messages();
    drupal_set_message("Sorry, membership activation is currently unavailable. Please try again later or <a href='/contact'>contact us</a>.", "help-tip");
    drupal_goto("user/" . $user->uid);
    return;
  }

  // check if user is already subscribed
  if (tm_subscriptions_is_user_subscription_enabled($user->uid)) {
    
    $subscription_date = tm_subscriptions_user_get_subscription_date($account);
    $subscription_date_text = date('Y-m-d', strtotime($subscription_date));
    $expires_text = tm_subscriptions_user_get_subscription_expires_text($account);

    $subscription_message = "";
    if ($subscription_date != "") {
      $subscription_message = "Your " . $conf["tm_subscriptions_user_label"] . " is registered until " . $subscription_date_text . " (" . $expires_text . ")";
    } else {
      $subscription_message = "You already have a " . $conf["tm_subscriptions_user_label"] . " subscription";
    }

    drupal_get_messages();
    drupal_set_message($subscription_message, "help-tip");

    drupal_goto("user/" . $user->uid);
    return;
  }

  // check if user must be approved
  if ($conf["tm_subscriptions_user_cta_approved_account"]) {
    if (!in_array("approved user", $account->roles)) {
      drupal_get_messages();
      drupal_set_message("You need an approved account to upgrade your membership.", "help-tip");
      drupal_goto("user/" . $user->uid);
      return;
    }
  }

  // check not chapter leader
  if (in_array("chapter leader", $account->roles)) {
      drupal_get_messages();
      drupal_set_message("Your membership is complimentary as a Chapter Leader. Share the <a href='/membership/invite'>invitation link</a> with your members.", "help-tip");
      drupal_goto("user/" . $user->uid);
      return;
  }

  // check that subscriptions are enabled in this country
  $subscription = tm_subscriptions_get_user_subscription($account);
  if ($subscription == null) {
    drupal_get_messages();
    drupal_set_message($conf["tm_subscriptions_user_label"] . " is not available in your country.", "help-tip");
    drupal_goto("user/" . $user->uid);
    return;
  }

  // set cookie for subsequent page loads
  setcookie("tm_subscriptions_invite_user_cta", 1, strtotime('+30 days'), "/", "." . $conf["tm_email_server_url_domain"]);

  // hide for subsequent page loads
  $hide_cta_cookie_name = $conf["tm_subscriptions_user_hide_cta_cookie"];
  setcookie($hide_cta_cookie_name, 0, strtotime('+30 days'), "/", "." . $conf["tm_email_server_url_domain"]);

  // pass on partner code
  if (isset($_GET["partner"])) {
    $partner_code = $_GET["partner"];
    drupal_goto("user/" . $user->uid, array('query' => array('partner' => $partner_code)));
  } else {
    drupal_goto("user/" . $user->uid);
  }

  return;

}
